---
import { default as MobileMenuFooter } from '@starlight/components/MobileMenuFooter.astro';
import { default as SidebarSublist } from '@starlight/components/SidebarSublist.astro';
import type { SidebarLink } from '@starlight/utils/routing/types.ts';
import { stripLeadingAndTrailingSlashes } from '@starlight/utils/path.ts';
import { getEntry } from 'astro:content';

import DonateButton from '@components/DonateButton.astro';
import { isDownloadsInfoExist } from '@utils/helper.mjs';

const { sidebar, id } = Astro.locals.starlightRoute;

const [page] = id.split('/');
const isHelpPage = id.startsWith('help');
const isTroubleshooting = id.startsWith('troubleshooting');

// replace links to missing downloadsInfo.json file with bitbucket
if (!isDownloadsInfoExist()) {
  const downloadsInfo = sidebar.find(entry => entry.label === 'Download') as SidebarLink;
  downloadsInfo.href = 'https://bitbucket.org/onemen/tabmixplus-for-firefox/downloads/';
}

// replace links to missing releases files with our repository releases
const releases = sidebar.find(entry => entry.label.startsWith('Releases')) as Group;
if (releases.entries.length === 0) {
  const releasesLink = releases as unknown as SidebarLink;
  releasesLink.type = 'link';
  releasesLink.href = 'https://github.com/onemen/TabMixPlus/releases';
  releasesLink.attrs = {};
}

// collapsed other top level entries
sidebar.forEach(entry => {
  if (entry.type === 'group') {
    const label = entry.label.toLowerCase();
    entry.collapsed = label !== page && label !== 'important links';
  }
});

// build nested help items
const help = sidebar.find(entry => entry.label === 'Help');
const helpGroup = (help && help.type === 'group' ? help : undefined)!;
type Group = typeof helpGroup;

const baseUrl = import.meta.env.BASE_URL?.replace(/\/$/, '') ?? '';

const newHelpItems: Record<string, typeof helpGroup.entries> = {};

await Promise.all(
  helpGroup.entries.map(async i => {
    if (i.type !== 'group') {
      const itemSlug = stripLeadingAndTrailingSlashes(i.href.replace(RegExp(`^${baseUrl}/`), ''));
      const group = (await getEntry('docs', itemSlug))?.data.group;
      if (group) {
        newHelpItems[group] = newHelpItems[group] || [];
        newHelpItems[group].push(i);
      }
    }
    return i;
  })
);

helpGroup.entries = Object.entries(newHelpItems).flatMap(([group, entries]) =>
  group === 'top' || (entries.length < 2 && group !== 'links')
    ? entries
    : [
        {
          type: 'group',
          label: group.charAt(0).toUpperCase() + group.slice(1),
          entries,
          badge: undefined,
          collapsed: false,
        } as typeof helpGroup,
      ]
);

// add sidebar entries for links with hash to link and display-tab pages
interface CustomLink extends SidebarLink {
  attrs: SidebarLink['attrs'] & { 'data-hash'?: string };
}

function createNewEntry({ label, href }: { label: string; href: string }): CustomLink {
  return {
    type: 'link' as const,
    isCurrent: false,
    badge: undefined,
    label,
    href,
    attrs: { 'data-hash': 'true' },
  };
}

const fileTypeEditor = createNewEntry({
  label: 'File type editor',
  href: id === 'help/links' ? '#file-type-editor' : `${baseUrl}/help/links#file-type-editor`,
});

const customizingTabsStyles = createNewEntry({
  label: 'Customizing Tabs Styles',
  href:
    id === 'help/display-tab'
      ? '#customize-styles'
      : `${baseUrl}/help/display-tab#customize-styles`,
});

const linksEntries = helpGroup.entries.find(entry => entry.label === 'Links') as Group;
linksEntries.entries.splice(1, 0, fileTypeEditor);

const displayEntries = helpGroup.entries.find(entry => entry.label === 'Display') as Group;
displayEntries.entries.splice(2, 0, customizingTabsStyles);
---

<div class="tabmix-sidebar-header">
  <div class="flex justify-center py-2">
    <DonateButton />
  </div>

  <div class="tabmix-nav px-6 py-4">
    <ul class="top-level mx-auto flex list-none gap-6 text-base">
      <li>
        <a
          href={`${baseUrl}/help/links`}
          class:list={{ 'hover:underline': true, active: isHelpPage }}>Help</a
        >
      </li>
      <li>
        <a
          href={`${baseUrl}/troubleshooting/tabmix-does-not-work`}
          class:list={{ 'hover:underline': true, active: isTroubleshooting }}>Troubleshooting</a
        >
      </li>
    </ul>
  </div>
</div>

<SidebarSublist sublist={sidebar} />
<div class="md:sl-hidden">
  <MobileMenuFooter />
</div>

<script>
  import { navigate } from 'astro:transitions/client';
  var key = 'sidebar-position';
  var timeout = 0;

  function isElementInViewport(el: Element) {
    const rect = el.getBoundingClientRect();
    const isInView =
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    return isInView;
  }

  function updateEntryWithHash(url?: URL) {
    const { pathname, hash = '' } = url ?? window.location;
    if (hash) {
      document.querySelector(`a[aria-current="page"]`)?.removeAttribute('aria-current');
      (
        document.querySelector(`a[href="${pathname.replace(/\/$/, '')}${hash}"]`) ??
        document.querySelector(`.sidebar-content a[href="${hash}"]`) ??
        document.querySelector(`a[href="${pathname}"]`)
      )?.setAttribute('aria-current', 'page');
    }
  }

  function handleSidebarScroll(event: Event) {
    const sidebar = event.target as HTMLElement;
    if (!timeout) {
      timeout = window.setTimeout(() => {
        sessionStorage.setItem(key, String(sidebar?.scrollTop));
        timeout = 0;
      }, 100);
    }
  }

  var hashLinkClicked = false;
  function handleLinkClick(event: Event) {
    const target = event.target as HTMLElement;
    const href = target.closest('a')?.href;
    if (href) {
      const url = new URL(href);
      if (url.hash) {
        event.preventDefault();
        hashLinkClicked = true;
        updateEntryWithHash(url);
        navigate(href).then(() => {
          // Force hash into URL if needed
          if (window.location.hash !== url.hash) {
            history.pushState({}, document.title, href);
          }
          updateEntryWithHash(url);
          document.querySelector(url.hash)?.scrollIntoView();
        });
      }
    }
  }

  ['file-type-editor', 'customize-styles'].forEach(id => {
    document.querySelector(`a[href$="#${id}"]`)?.addEventListener('click', handleLinkClick);
  });

  var initialLoad = true;
  document.addEventListener('astro:page-load', () => {
    // don't update the hash before we verify the the hash exist after navigation
    if (!hashLinkClicked) {
      updateEntryWithHash();
    }
    hashLinkClicked = false;

    // update selected menu in the sidebar and scroll to hash (if needed)
    if (window.location.hash) {
      updateEntryWithHash();
      document.querySelector(window.location.hash)?.scrollIntoView();
    }

    const sidebar = document.querySelector('#starlight__sidebar');

    // skip restore scroll position on full page reload
    // scroll selected entry into view
    if (initialLoad) {
      const currentEntry = document.querySelector(`a[aria-current="page"]`);
      if (currentEntry && !isElementInViewport(currentEntry)) {
        currentEntry?.scrollIntoView({ behavior: 'auto', inline: 'nearest' });
      }
      sidebar?.addEventListener('scroll', handleSidebarScroll);
      sessionStorage.setItem(key, String(sidebar?.scrollTop));
      initialLoad = false;
      return;
    }

    // restore scroll position
    if (sidebar) {
      sidebar.removeEventListener('scroll', handleSidebarScroll);
      sidebar.addEventListener('scroll', handleSidebarScroll);
      try {
        sidebar.scrollTop = +(sessionStorage.getItem(key) ?? 0);
      } catch {
        /* empty */
      }
    }
  });
</script>
